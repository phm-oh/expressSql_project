const { pool } = require('../config/database');
const bcrypt = require('bcryptjs');

class UserModel {
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin)
  static async getAllUsers() {
    const client = await pool.connect();
    try {
      console.log('üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');
      const result = await client.query(
        'SELECT id, username, email, full_name, role, is_active, created_at FROM users ORDER BY created_at DESC'
      );
      console.log(`‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.rows.length} ‡∏Ñ‡∏ô`);
      return result.rows;
    } catch (error) {
      console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error.message);
      throw new Error(`‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    } finally {
      client.release();
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ï‡∏≤‡∏° ID
  static async getUserById(id) {
    const client = await pool.connect();
    try {
      console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ID: ${id}`);
      const result = await client.query(
        'SELECT id, username, email, full_name, role, is_active, created_at FROM users WHERE id = $1',
        [id]
      );
      const user = result.rows[0] || null;
      console.log(user ? `‚úÖ ‡∏û‡∏ö user: ${user.username}` : `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö user ID: ${id}`);
      return user;
    } catch (error) {
      console.error(`‚ùå ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ID ${id} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, error.message);
      throw new Error(`‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    } finally {
      client.release();
    }
  }

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡πÇ‡∏î‡∏¢ username (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö login)
  static async getUserByUsername(username) {
    const client = await pool.connect();
    try {
      console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user: ${username}`);
      const result = await client.query('SELECT * FROM users WHERE username = $1', [username]);
      return result.rows[0] || null;
    } catch (error) {
      console.error(`‚ùå ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ${username} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, error.message);
      throw new Error(`‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    } finally {
      client.release();
    }
  }

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡πÇ‡∏î‡∏¢ email
  static async getUserByEmail(email) {
    const client = await pool.connect();
    try {
      const result = await client.query('SELECT * FROM users WHERE email = $1', [email]);
      return result.rows[0] || null;
    } catch (error) {
      console.error(`‚ùå ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ email ${email} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, error.message);
      throw new Error(`‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ email ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    } finally {
      client.release();
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà (register)
  static async createUser(userData) {
    const { username, email, password, full_name, role = 'user' } = userData;
    const client = await pool.connect();
    
    try {
      console.log(`‚ûï ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà: ${username}`);
      
      // hash password
      const hashedPassword = await bcrypt.hash(password, 10);
      
      const result = await client.query(
        `INSERT INTO users (username, email, password, full_name, role) 
         VALUES ($1, $2, $3, $4, $5) 
         RETURNING id, username, email, full_name, role, is_active, created_at`,
        [username, email, hashedPassword, full_name, role]
      );
      
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${result.rows[0].username} (ID: ${result.rows[0].id})`);
      return result.rows[0];
    } catch (error) {
      console.error(`‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, error.message);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
      if (error.code === '23505') {
        if (error.constraint.includes('username')) {
          throw new Error('Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß');
        }
        if (error.constraint.includes('email')) {
          throw new Error('Email ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß');
        }
      }
      throw new Error(`‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    } finally {
      client.release();
    }
  }

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó user
  static async updateUser(id, userData) {
    const { username, email, full_name, role, is_active } = userData;
    const client = await pool.connect();
    
    try {
      console.log(`üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç user ID: ${id}`);
      const result = await client.query(
        `UPDATE users 
         SET username = $1, email = $2, full_name = $3, role = $4, is_active = $5, updated_at = CURRENT_TIMESTAMP
         WHERE id = $6 
         RETURNING id, username, email, full_name, role, is_active, created_at, updated_at`,
        [username, email, full_name, role, is_active, id]
      );
      
      const user = result.rows[0] || null;
      console.log(user ? `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç user ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${user.username}` : `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö user ID: ${id}`);
      return user;
    } catch (error) {
      console.error(`‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç user ID ${id} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, error.message);
      
      if (error.code === '23505') {
        if (error.constraint.includes('username')) {
          throw new Error('Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß');
        }
        if (error.constraint.includes('email')) {
          throw new Error('Email ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß');
        }
      }
      throw new Error(`‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç user ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    } finally {
      client.release();
    }
  }

  // ‡∏•‡∏ö user
  static async deleteUser(id) {
    const client = await pool.connect();
    try {
      console.log(`üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö user ID: ${id}`);
      const result = await client.query(
        'DELETE FROM users WHERE id = $1 RETURNING id, username, email, full_name',
        [id]
      );
      const user = result.rows[0] || null;
      console.log(user ? `‚úÖ ‡∏•‡∏ö user ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${user.username}` : `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö user ID: ${id}`);
      return user;
    } catch (error) {
      console.error(`‚ùå ‡∏•‡∏ö user ID ${id} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, error.message);
      throw new Error(`‡∏•‡∏ö user ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    } finally {
      client.release();
    }
  }

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  static async changePassword(id, newPassword) {
    const client = await pool.connect();
    try {
      console.log(`üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô user ID: ${id}`);
      
      const hashedPassword = await bcrypt.hash(newPassword, 10);
      const result = await client.query(
        'UPDATE users SET password = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2 RETURNING id, username',
        [hashedPassword, id]
      );
      
      const user = result.rows[0] || null;
      console.log(user ? `‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${user.username}` : `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö user ID: ${id}`);
      return user;
    } catch (error) {
      console.error(`‚ùå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô user ID ${id} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:`, error.message);
      throw new Error(`‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    } finally {
      client.release();
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
  static async verifyPassword(plainPassword, hashedPassword) {
    return await bcrypt.compare(plainPassword, hashedPassword);
  }
}

module.exports = UserModel;